import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;

import rpi.nlp.arl.amrTranslator.AMRTranslator;
import rpi.nlp.arl.amrTranslator.SystemAMRTranslator;
import rpi.nlp.arl.clustering.JointCluster;
import rpi.nlp.arl.identifier.TriggerArgIdentifier;
import rpi.nlp.arl.naming.ArgumentRoleNaming;
import rpi.nlp.arl.naming.TriggerNaming;
import rpi.nlp.arl.representation.GeneralRepresentation;
import rpi.nlp.arl.representation.TAEOutput;
import rpi.nlp.arl.util.EntityIndex;
import rpi.nlp.arl.util.PutEntityArguments;
import rpi.nlp.word2vec.VectorModel;

void systemAMR(){
	// ************  INPUT  **********************************
	// INPUT: the directory of the system AMR annotation files
	String parsedFilePath = "input/AMRParsingSystem/";

	// MEDIATE: nodes and edges extracted from AMR parsing
	String nodeEdgeFilePath = "input/AMRNodeEdgeSystem/";
	// MEDIATE: triggers and corresponding arguments
	String triggerArgFile = "input/triggerArgFile.System.txt";
	// MEDIATE: word sense vectors for triggers
	String triggerGeneralVec = "input/triggerGeneralVec.System.txt";
	// MEDIATE: general vectors for arguments
	String argumentVec = "input/argumentVec.System.txt";
	// MEDIATE: event structures representations
	String triggerMultilayerStrucRep = "input/triggerMultilayerStrucRep.System.txt";

	// extract nodes and edges from AMR parsing results
	SystemAMRTranslator.translate(parsedFilePath, nodeEdgeFilePath);
	System.out.println("finish extracting nodes and edges ..");

	// Identify trigger and argument candidates
	// INPUT: Annotations for AMR relation: whether the relation will be used to compose the event structure or for specifying arguments
	String annotatedRelationFile = "Data/Resources/amrRelationsAnnotated.txt";
	TriggerArgIdentifier.identifyTriggerArgs(nodeEdgeFilePath, triggerArgFile, annotatedRelationFile);
	System.out.println("finish extracting triggers and arguments ..");

	// train Tensor/Matrix representations for each relation
	// INPUT: pre-trained word sense embeddings
	String modelFile = "Data/model/wsd.model";
	VectorModel vm = VectorModel.loadFromFile(modelFile);
//		TreeTensorAE ttae = new TreeTensorAE();
//		ttae.pipeline(nodeEdgeFilePath, vm);
//		System.out.println("finished training relation representations ..");

	// generate tree structure representation
	TAEOutput.generateResults(vm, nodeEdgeFilePath, triggerMultilayerStrucRep);
	System.out.println("finish generating structure representations ..");

	// generate trigger and argument representations
	// MEDIATE: will generate a new structure representation file: triggerMultilayerStrucRep+".processed"
	GeneralRepresentation.generalRepresentation(modelFile, triggerGeneralVec, argumentVec, triggerArgFile);
	GeneralRepresentation.processStructureRep1(triggerGeneralVec, triggerMultilayerStrucRep);
	System.out.println("finish generating trigger and arg representations ..");

	int min = 10;
	int maxNum = 60;
	double balance = 0.7;

	String siginal = "System";

	System.out.println("start clustering ..");

	// MEDIATE: will generate many clustering results
	String triggerResultPath = "input/Cluster/triggerOverallCluster";
	String argResultPath = "input/Cluster/argOverallCluster";

	double minOptimalValue = 100000000;
	int minNumOfClusterTrigger=min, minNumOfClusterArgument=min;

	for(int numOfClusterTrigger = min; numOfClusterTrigger<maxNum; numOfClusterTrigger=numOfClusterTrigger+2){
		for(int numOfClusterArgument = min; numOfClusterArgument<maxNum; numOfClusterArgument=numOfClusterArgument+5){
			JointCluster jc = new JointCluster();
			double optimalValue = jc.jointOptimizedClusteringOverall(triggerGeneralVec, triggerMultilayerStrucRep+".processed", argumentVec, numOfClusterTrigger, numOfClusterArgument, triggerResultPath, argResultPath, triggerArgFile, balance, siginal);
			if(optimalValue<minOptimalValue){
				minOptimalValue = optimalValue;
				minNumOfClusterTrigger = numOfClusterTrigger;
				minNumOfClusterArgument = numOfClusterArgument;
			}
		}
	}
	System.out.println("finish Clustering...");

	String optimalTriggerClusterFile = triggerResultPath + "."+minNumOfClusterTrigger + "." + minNumOfClusterArgument;
	String optimalArgumentClusterFile = argResultPath + "."+minNumOfClusterTrigger + "." + minNumOfClusterArgument;

	String namingMethod = "majority"; // majority or centroid
	String namedClusterFile = optimalTriggerClusterFile+"."+namingMethod;
	TriggerNaming.naming1(optimalTriggerClusterFile, namedClusterFile, triggerGeneralVec, namingMethod);

	// INPUT: arg role mapping results extracted from FrameNet, VerbNet, and PropBank
	String roleMapFile = "Data/Resources/argRoleMap1.txt";

	// MEDIATE: the output, including triggers, arguments, and their roles.
	String roleNamingResult = "input/argRoleNamingResult.System.txt";
	// MEDIATE: Entities from AMR parsing
	String amrParsedEntityFile = "input/amrParsedEntities.System.txt";
	EntityIndex.readEntitys(nodeEdgeFilePath, amrParsedEntityFile);

	// MEDIATE: remove some noisy args
	String notArgFile = "Data/Resources/notArgs.txt";
	ArgumentRoleNaming.argumentRoleNaming(modelFile, notArgFile, namedClusterFile, triggerArgFile, roleMapFile, amrParsedEntityFile, roleNamingResult);

	// OUTPUT: the final output, including triggers, arguments, and their roles.
	// OUTPUT FILE: finalOutput
	String finalOutput = "input/output.System.txt";
	ArgumentRoleNaming.processDoc(roleNamingResult, finalOutput);
}

Logger logger = Logger.getLogger("libearal-event");
Calendar start = Calendar.getInstance();
System.out.println("systemAMR()");

systemAMR();

Calendar end = Calendar.getInstance();
long consumed = end.getTimeInMillis() - start.getTimeInMillis();

logger.log(Level.INFO, "Time Consumed: {0} ms", new Object[]{consumed});
